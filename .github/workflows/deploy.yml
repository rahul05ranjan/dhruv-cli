name: Deployment Pipeline

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string

permissions:
  contents: read
  packages: write
  deployments: write
  id-token: write

env:
  NODE_VERSION: '20.8.1'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  pre-deployment:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.environment.outputs.environment }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=$(cat package.json | jq -r '.version')
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Deploying version: ${VERSION}"

      - name: Determine environment
        id: environment
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            if [[ "${{ github.event.release.prerelease }}" == "true" ]]; then
              ENVIRONMENT="staging"
            else
              ENVIRONMENT="production"
            fi
          else
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          fi
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "Deploying to environment: ${ENVIRONMENT}"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run comprehensive tests
        run: |
          npm run test:ci
          npm run lint
          npm run build

      - name: Security scan
        run: npm audit --audit-level=moderate

      - name: Package validation
        run: |
          npm pack --dry-run
          echo "Package size check..."
          npm pack
          ls -lah *.tgz

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.environment == 'staging' || (github.event_name == 'release' && github.event.release.prerelease)
    timeout-minutes: 20
    environment:
      name: staging
      url: https://staging.example.com
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build for staging
        run: |
          NODE_ENV=staging npm run build
          npm run docs

      - name: Deploy to staging NPM registry
        if: github.event_name == 'release' && github.event.release.prerelease
        run: npm publish --tag beta --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Deploy documentation to staging
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages-staging
          destination_dir: staging

      - name: Staging health check
        run: |
          echo "Running staging health checks..."
          # Add your staging health check commands here
          curl -f https://staging.example.com/health || echo "Health check failed"

      - name: Notify staging deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            üöÄ Staging Deployment ${{ job.status }}
            
            **Version:** ${{ needs.pre-deployment.outputs.version }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-staging]
    if: needs.pre-deployment.outputs.environment == 'production' && (github.event_name == 'release' && !github.event.release.prerelease)
    timeout-minutes: 30
    environment:
      name: production
      url: https://www.npmjs.com/package/dhruv-cli
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build for production
        run: |
          NODE_ENV=production npm run build
          npm run docs

      - name: Final production tests
        run: |
          npm run test:ci
          npm run lint
          npm audit --audit-level=moderate

      - name: Deploy to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Deploy documentation to production
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages
          enable_jekyll: false

      - name: Create deployment artifact
        run: |
          mkdir -p artifacts
          cp -r dist/* artifacts/
          cp package.json artifacts/
          cp README.md artifacts/
          tar -czf deployment-${{ needs.pre-deployment.outputs.version }}.tar.gz artifacts/

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-${{ needs.pre-deployment.outputs.version }}
          path: deployment-${{ needs.pre-deployment.outputs.version }}.tar.gz
          retention-days: 90

      - name: Production health check
        run: |
          echo "Waiting for NPM propagation..."
          sleep 60
          
          echo "Verifying NPM package..."
          npm view dhruv-cli version
          
          echo "Testing package installation..."
          npm install -g dhruv-cli@${{ needs.pre-deployment.outputs.version }}
          dhruv-cli --version

      - name: Update GitHub release
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ github.event.release.id }},
              body: ${{ github.event.release.body }} + '\n\n---\n\n‚úÖ **Successfully deployed to production**\n\n- üì¶ NPM: https://www.npmjs.com/package/dhruv-cli\n- üìö Documentation: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}\n- üîç Health Status: ‚úÖ All systems operational'
            });

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#releases'
          text: |
            üéâ Production Deployment ${{ job.status }}
            
            **Version:** ${{ needs.pre-deployment.outputs.version }}
            **NPM:** https://www.npmjs.com/package/dhruv-cli
            **Docs:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
            **Release:** ${{ github.event.release.html_url }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  rollback:
    name: Rollback Capability
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [pre-deployment, deploy-staging, deploy-production]
    timeout-minutes: 10
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - uses: actions/checkout@v4

      - name: Create rollback issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üö® Deployment Failure - Rollback Required`;
            const body = `
            ## Deployment Failure Alert
            
            A deployment has failed and may require rollback procedures.
            
            ### Failure Details
            - **Version:** ${{ needs.pre-deployment.outputs.version }}
            - **Environment:** ${{ needs.pre-deployment.outputs.environment }}
            - **Workflow:** ${{ github.workflow }}
            - **Run ID:** ${{ github.run_id }}
            
            ### Failed Jobs
            - Deploy Staging: ${{ needs.deploy-staging.result }}
            - Deploy Production: ${{ needs.deploy-production.result }}
            
            ### Immediate Actions Required
            - [ ] Assess impact of deployment failure
            - [ ] Determine if rollback is necessary
            - [ ] Execute rollback procedures if needed
            - [ ] Investigate root cause
            - [ ] Fix underlying issues
            
            ### Rollback Commands
            \`\`\`bash
            # If NPM package was published, deprecate if necessary
            npm deprecate dhruv-cli@${{ needs.pre-deployment.outputs.version }} "Deployment failed, please use previous version"
            \`\`\`
            
            **This issue was automatically created by the deployment pipeline.**
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['deployment', 'urgent', 'rollback'],
              assignees: ['${{ github.repository_owner }}']
            });
