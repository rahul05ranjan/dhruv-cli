name: Release Management

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, minor, major, prerelease)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write

jobs:
  pre-release-validation:
    name: Pre-Release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.8.1'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run full test suite
        run: npm run test:ci

      - name: Build project
        run: npm run build

      - name: Generate documentation
        run: npm run docs

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Package size check
        run: |
          npm pack --dry-run
          du -sh *.tgz || echo "No package found"

      - name: Validate package contents
        run: |
          npm pack
          tar -tzf *.tgz | head -20

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: pre-release-validation
    timeout-minutes: 15
    environment: production
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.8.1'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build project
        run: npm run build

      - name: Generate documentation
        run: npm run docs

      - name: Generate changelog
        run: |
          npx conventional-changelog-cli -p angular -i CHANGELOG.md -s
          git add CHANGELOG.md || echo "No changelog changes"

      - name: Create Release PR
        if: github.event_name == 'workflow_dispatch'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore(release): prepare release ${{ github.event.inputs.release_type }}'
          title: 'chore(release): prepare ${{ github.event.inputs.release_type }} release'
          body: |
            ## Release Preparation
            
            This PR prepares a ${{ github.event.inputs.release_type }} release.
            
            ### Changes included:
            - Updated version in package.json
            - Generated changelog
            - Updated documentation
            
            ### Pre-release checklist:
            - [ ] All tests passing
            - [ ] Documentation updated
            - [ ] Security audit clean
            - [ ] Breaking changes documented
            
            **Auto-generated by Release Management workflow**
          branch: release/prepare-${{ github.event.inputs.release_type }}
          delete-branch: true

      - name: Release with semantic-release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Install semantic-release if not already installed
          npm install --no-save semantic-release @semantic-release/changelog @semantic-release/git
          npx semantic-release

      - name: Manual publish for workflow dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          # For manual releases, update version first
          npm version ${{ github.event.inputs.release_type }} --no-git-tag-version
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update GitHub Pages
        if: startsWith(github.ref, 'refs/tags/v')
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages
          enable_jekyll: false

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**
            docs/**
            *.tgz
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  post-release:
    name: Post Release Tasks
    runs-on: ubuntu-latest
    needs: release
    if: always() && (needs.release.result == 'success')
    timeout-minutes: 10
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - uses: actions/checkout@v4

      - name: Update repository topics
        uses: actions/github-script@v7
        with:
          script: |
            const packageJson = require('./package.json');
            const topics = [
              'cli',
              'ai',
              'developer-tools',
              'ollama',
              'typescript',
              `version-${packageJson.version.replace(/\./g, '-')}`
            ];
            
            await github.rest.repos.replaceAllTopics({
              owner: context.repo.owner,
              repo: context.repo.repo,
              names: topics
            });

      - name: Notify stakeholders
        uses: 8398a7/action-slack@v3
        with:
          status: 'success'
          channel: '#releases'
          text: |
            ðŸŽ‰ New release published!
            
            **Repository:** ${{ github.repository }}
            **Version:** ${{ github.ref_name }}
            **Release Notes:** ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
